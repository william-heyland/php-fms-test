#########################################
# Captains Log entry 1, Stardate 20150529
#########################################

My initial observations of the 3 interfaces
===========================================
a) The FileSystem interface provides methods for creating, updating, and deleting Files and Folders.
The FileSystem interface thus dictates that it shall handle all interactions with my chosen storage engine.

b) The design of the File and Folder interfaces provide a simple "datatype role" with no direct database interaction.
The File and Folder interfaces can and should however handle all input validation where possible.

c) The File interface defines the relationship between the file and it's parent Folder Object.

d) However, the Folder interface does not provide any such relationship with it's own parent folder.
The Folder interface does however allow the path to be set. The path will thus be used to define the location of the folder and it's parent.

My plan
=======
1) I will be using the MySQL database storage engine for this project.

2) I will create a separate database interface for my storage engine implementation.

3) I will "normalise" the File and Folder data with the addition of file_id, folder_id, and parent_folder_id fields.
The external API will remain unchanged.
The addition of parent_folder_id will enforce the relationship of the data and help ensure data integrity in case of programming errors.
Note: Under normal circumstances I would discuss this with you first, but since it's now the weekend and this is a TEST project, I hope this is OK.

#########################################
# Captains Log entry 2, Stardate 20150531
#########################################

Observations
============
a) The File and Folder interfaces specify a time parameter type of DateTime yet do not enforce this in the method declaration.
I have added the 'DateTime' datatype specification.

Progress
========
1) Progress is going well, I have completed a lot of the "back-end" functionality.
I need to further test and review the code I have written and check for errors.

2) I have added 2 new Database interfaces files and implemented a basic mysql database storage framework.

3) I still need to write data input validation code for the File and Folder classes.

4) If necessary, I need to decide on an interactive "front-end" to the filesystem (check with Richard?)

#########################################
# Captains Log entry 3, Stardate 20150601
#########################################

Progress
========
1) Input validation is complete

2) I have further tested and verified that all the File, Folder, and FileSystem methods are working as intended

3) I am ready to decide on an inteface?

#########################################
# Captains Log entry 4, Stardate 20150602
#########################################

Progress
========
1) I have decided on a CLI similar to FTP

2) I have restructured the code base to allow for multiple potential interfaces in the future.

3) The File Management System now resides in it's own namespace 'FMS'.

4) File an Folder names should be unique within their respective parent folders.
This is already enforced in the relational database, but I also intend to implement this validation within the FileSystem class.

5) I have created the outlines of the CLI interface in the "cli/cli.php" file. To test, run 'php PATH/cli.php'.
You will get an interactive "FMS>" prompt. Type "help" for a list of supported commands.

#########################################
# Captains Log entry 5, Stardate 20150603
#########################################

Progress
========
1) I have decided to limit the system to a single Root Folder.
It was not clear within the interface design if the FMS should support multiple root folders.
For simplicity I have decided to limit it to a single root folder named '/'.
The root folder is created, if it does not already exist, as part of the FileSystem initialisation (within the constructor).

#########################################
# Captains Log entry 6, Stardate 20150604
#########################################

Progress
========
1) I have finished the Command Line Interface and am in full testing mode.

Known Limitations
=================
1) Removing a file or folder does not currently "clean up" the files in the upload folder (UPLOADS_PATH).
2) Not auto tab completion on interactive command line. The "readline" library could provide this functionality.
3) Limited folder navigation. Can only navigate a single level at a time.
4) Limited interactive command line output controls. Could use "ncurses" for loads more POWER.
5) I have limited my commands to use the original FMS api for the purpose of the test. However, more optimal methods for performing file and folder navigation would be desirable.
6) A big TODO is to convert all the database queries into prepared statements. I am now using the mysql native driver on my production server and have rewritten one of the queries as an example.

